
.program fourwire
; Sample bits using an external clock, and push groups of bits into the RX FIFO.
; - IN pin 0 is the data pin   (GPIO18)
; - IN pin 1 is the dc pin     (GPIO19)
; - IN pin 2 is the clock pin  (GPIO20)
; - JMP pin is the chip select (GPIO21)
; - Autopush is enabled, threshold 8
;
; This program waits for chip select to be asserted (low) before it begins
; clocking in data. Whilst chip select is low, data is clocked continuously. If
; chip select is deasserted part way through a data byte, the partial data is
; discarded. This makes use of the fact a mov to isr clears the input shift
; counter.
flush:
    mov isr, null         ; Clear ISR and input shift counter
    jmp check_chip_select ; Poll chip select again
.wrap_target
do_bit:
    wait 0 pin 2          ; Detect rising edge and sample input data
    wait 1 pin 2          ; (autopush takes care of moving each complete
    in pins, 2            ; data word to the FIFO)
check_chip_select:
    jmp pin, flush        ; Bail out if we see chip select high
.wrap

% c-sdk {
static inline void fourwire_program_init(PIO pio, uint sm, uint offset, uint pin, uint jmp_pin) {
    pio_sm_config c = fourwire_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, jmp_pin);
    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, false);
    pio_sm_set_consecutive_pindirs(pio, sm, 1, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, jmp_pin, 1, false);
    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);
    pio_gpio_init(pio, pin + 2);
    pio_gpio_init(pio, jmp_pin);
    // set pulls
    gpio_set_pulls(pin, true, false);
    gpio_set_pulls(pin + 1, true, false);
    gpio_set_pulls(pin + 2, true, false);
    gpio_set_pulls(jmp_pin, true, false);

    // Shifting to left matches the customary MSB-first ordering of SPI.
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        true,  // Autopush enabled
        16     // Autopush threshold
    );

    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
